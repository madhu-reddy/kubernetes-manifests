# For this example, defining a volume and mounting it inside the demo container as /config creates two files, /config/gamefile.properties and /config/user-interface-file.properties, even though there are four keys in the ConfigMap.
# This is because the Pod definition specifies an items array in the volumes section. 
#If you omit the items array entirely, every key in the ConfigMap becomes a file with the same name as the key, and you get 4 files.

apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: ["sleep", "3600"]
      env:
        # Define the environment variable
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
                                     # from the key name in the ConfigMap.
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      volumeMounts:
      - name: config
        mountPath: "/config"
        readOnly: true
  volumes:
  # You set volumes at the Pod level, then mount them into containers inside that Pod
  - name: config
    configMap:
      # Provide the name of the ConfigMap you want to mount.
      name: game-demo
      # An array of keys from the ConfigMap to create as files
      items:
      - key: "game.properties"
        path: "gamefile.properties"
      - key: "user-interface.properties"
        path: "user-interface-file.properties"
